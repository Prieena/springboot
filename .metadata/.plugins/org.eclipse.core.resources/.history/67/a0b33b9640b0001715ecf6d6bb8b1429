package com.priya.movieapp.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.priya.movieapp.Service.MovieService;
import com.priya.movieapp.domain.MovieModel;

@RestController
@RequestMapping("/v0.1/MovieService")
public class MovieController {
	
	 @Autowired
     private MovieService movieservice;
     @RequestMapping("/movies")
     public ResponseEntity getAllMovies() {
         List<MovieModel> resultList1 = movieservice.getAllMovie();
         return new ResponseEntity<List<MovieModel>>(resultList1, HttpStatus.OK);
     }
     @RequestMapping(value = "/movies", method = RequestMethod.POST)
     public ResponseEntity addMovie(@RequestBody MovieModel movie) {
         movieservice.addMovie(movie);
         return new ResponseEntity<String>("Done", HttpStatus.OK);
     }
     
     
     @RequestMapping(value="/movies/{id}")
     public ResponseEntity<MovieModel> getMovieById(@PathVariable("id") Integer id){
         
         MovieModel movie=MovieService.findById(id);
         if (movie==null) {
             return new ResponseEntity<MovieModel>(HttpStatus.NOT_FOUND);
         }
             return new ResponseEntity<MovieModel>(movie, HttpStatus.OK);
         
     }
     
     
     @RequestMapping(value="/movies/{id}", method=RequestMethod.DELETE)
     public ResponseEntity deleteMovie(@PathVariable("id") Integer id) {
        movieservice.deleteMovie(id);
        return new ResponseEntity<String>("Deleted Successfully!!!", HttpStatus.OK);
         
     }
     
     @RequestMapping(value = "/movies/id/{id}", method = RequestMethod.PUT)
     public ResponseEntity<?> updateMovies(@PathVariable("id") int id, @RequestBody MovieModel movies) {
         
  
         MovieModel currentMovie = MovieService.findById(id);
  
         if (currentMovie == null) {
             
             return new ResponseEntity<String>("id not found",HttpStatus.NOT_FOUND);
         }
  
         currentMovie.setMovieId(movies.getMovieId());
         currentMovie.setMovieName(movies.getMovieName());
         currentMovie.setMovieDescription(movies.getMovieDescription());
  
         MovieService.updateMovies(currentMovie);
         return new ResponseEntity<MovieModel>(currentMovie, HttpStatus.OK);
     }
       
 
}
